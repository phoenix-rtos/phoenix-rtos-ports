diff -Nuar dropbear-2018.76/common-session.c dropbear-2018.76.phoenix/common-session.c
--- dropbear-2018.76/common-session.c	2018-02-27 15:25:10.000000000 +0100
+++ dropbear-2018.76.phoenix/common-session.c	2021-12-22 13:28:52.482352829 +0100
@@ -586,7 +586,12 @@
 	if (ses.authstate.pw_passwd)
 		m_free(ses.authstate.pw_passwd);
 
+#ifdef ENABLE_PS_LOGIN_SERVICE
+	pw = phoenix_getpwnam(username);
+#else
 	pw = getpwnam(username);
+#endif
+
 	if (!pw) {
 		return;
 	}
diff -Nuar dropbear-2018.76/dbutil.c dropbear-2018.76.phoenix/dbutil.c
--- dropbear-2018.76/dbutil.c	2018-02-27 15:25:10.000000000 +0100
+++ dropbear-2018.76.phoenix/dbutil.c	2021-12-22 14:58:11.337209481 +0100
@@ -603,7 +603,11 @@
 char * expand_homedir_path(const char *inpath) {
 	struct passwd *pw = NULL;
 	if (inpath[0] != '/') {
+#ifdef ENABLE_PS_LOGIN_SERVICE
+		pw = phoenix_getpwuid(getuid());
+#else
 		pw = getpwuid(getuid());
+#endif
 		if (pw && pw->pw_dir) {
 			int len = strlen(inpath) + strlen(pw->pw_dir) + 2;
 			char *buf = m_malloc(len);
diff -Nuar dropbear-2018.76/dropbearkey.c dropbear-2018.76.phoenix/dropbearkey.c
--- dropbear-2018.76/dropbearkey.c	2018-02-27 15:25:10.000000000 +0100
+++ dropbear-2018.76.phoenix/dropbearkey.c	2021-12-22 14:58:51.889321587 +0100
@@ -326,7 +326,11 @@
 
 	/* a user@host comment is informative */
 	username = "";
+#ifdef ENABLE_PS_LOGIN_SERVICE
+	pw = phoenix_getpwuid(getuid());
+#else
 	pw = getpwuid(getuid());
+#endif
 	if (pw) {
 		username = pw->pw_name;
 	}
diff -Nuar dropbear-2018.76/loginrec.c dropbear-2018.76.phoenix/loginrec.c
--- dropbear-2018.76/loginrec.c	2018-02-27 15:25:12.000000000 +0100
+++ dropbear-2018.76.phoenix/loginrec.c	2021-12-22 13:31:31.626250228 +0100
@@ -275,7 +275,11 @@
 
 	if (username) {
 		strlcpy(li->username, username, sizeof(li->username));
+#ifdef ENABLE_PS_LOGIN_SERVICE
+		pw = phoenix_getpwnam(li->username);
+#else
 		pw = getpwnam(li->username);
+#endif
 		if (pw == NULL)
 			dropbear_exit("login_init_entry: Cannot find user \"%s\"",
 					li->username);
diff -Nuar dropbear-2018.76/Makefile.in dropbear-2018.76.phoenix/Makefile.in
--- dropbear-2018.76/Makefile.in	2018-02-27 15:25:10.000000000 +0100
+++ dropbear-2018.76.phoenix/Makefile.in	2021-12-17 18:24:51.364479006 +0100
@@ -36,7 +36,8 @@
 		queue.o \
 		atomicio.o compat.o fake-rfc2553.o \
 		ltc_prng.o ecc.o ecdsa.o crypto_desc.o \
-		gensignkey.o gendss.o genrsa.o
+		gensignkey.o gendss.o genrsa.o \
+		phoenix.o
 
 SVROBJS=svr-kex.o svr-auth.o sshpty.o \
 		svr-authpasswd.o svr-authpubkey.o svr-authpubkeyoptions.o svr-session.o svr-service.o \
diff -Nuar dropbear-2018.76/phoenix.c dropbear-2018.76.phoenix/phoenix.c
--- dropbear-2018.76/phoenix.c	1970-01-01 01:00:00.000000000 +0100
+++ dropbear-2018.76.phoenix/phoenix.c	2021-12-22 14:59:32.293479372 +0100
@@ -0,0 +1,177 @@
+#include <stdio.h>
+
+#include "phoenix.h"
+#include "dbutil.h"
+
+#ifdef ENABLE_PS_LOGIN_SERVICE
+
+#include <pwd.h>
+#include <sys/types.h>
+#include <stdio.h>
+#include <string.h>
+
+static struct passwd pw;
+static char linebuf[1024];
+
+static int password_db_read_next_user(FILE *fp, struct passwd *pwd_out)
+{
+	if (!fgets(linebuf, sizeof(linebuf), fp))
+		return 0;
+
+	char *buf = linebuf;
+
+	char *username = buf;
+	buf = strchr(buf, ':');
+	if (!buf)
+		goto failed;
+	*buf++ = '\0';
+
+	//if (strcmp(username, user) != 0)
+	//    continue;
+
+	char *password = buf;
+	buf = strchr(buf, ':');
+	if (!buf)
+		goto failed;
+	*buf++ = '\0';
+
+	char *uid_str = buf;
+	buf = strchr(buf, ':');
+	if (!buf)
+		goto failed;
+	*buf++ = '\0';
+	int uid = strtol(uid_str, 0, 0);
+
+	char *gid_str = buf;
+	buf = strchr(buf, ':');
+	if (!buf)
+		goto failed;
+	*buf++ = '\0';
+	int gid = strtol(gid_str, 0, 0);
+
+	char *gecos = buf;
+	buf = strchr(buf, ':');
+	if (!buf)
+		goto failed;
+	*buf++ = '\0';
+
+	char *dir = buf;
+	buf = strchr(buf, ':');
+	if (!buf)
+		goto failed;
+	*buf++ = '\0';
+
+	char *shell = buf;
+	buf = strchr(buf, '\n');
+	if (buf)
+		*buf++ = '\0';
+
+	pwd_out->pw_name = username;
+	pwd_out->pw_passwd = password;
+	pwd_out->pw_uid = uid;
+	pwd_out->pw_gid = gid;
+	//pwd_out->pw_comment = "";
+	pwd_out->pw_gecos = gecos;
+	pwd_out->pw_dir = dir;
+	pwd_out->pw_shell = shell;
+	return 1;
+failed:
+	return -1;
+}
+
+struct passwd* phoenix_getpwnam(const char *name)
+{
+	FILE *fp;
+
+	if ((fp = fopen("/local/passwd", "r")) == NULL)
+		return NULL;
+
+	while (password_db_read_next_user(fp, &pw) > 0) {
+		if (strcmp(pw.pw_name, name) == 0) {
+			fclose(fp);
+			return &pw;
+		}
+	}
+
+	fclose(fp);
+	return NULL;
+}
+
+
+struct passwd* phoenix_getpwuid(uid_t uid)
+{
+	FILE *fp;
+
+	if ((fp = fopen("/local/passwd", "r")) == NULL)
+		return NULL;
+
+	while (password_db_read_next_user(fp, &pw) > 0) {
+		if (pw.pw_uid == uid) {
+			fclose(fp);
+			return &pw;
+		}
+	}
+
+	fclose(fp);
+	return NULL;
+}
+
+
+static int ps_login_service_connect(int port)
+{
+	struct sockaddr_in  serveraddr;
+	int sock;
+	int res = socket(AF_INET, SOCK_STREAM, 0);
+	if (res < 0) {
+		return -1;
+	}
+	sock = res;
+
+	memset(&serveraddr, 0x00, sizeof(serveraddr));
+	serveraddr.sin_family = AF_INET;
+	serveraddr.sin_port = htons(port);
+	serveraddr.sin_addr.s_addr = inet_addr("127.0.0.1");
+
+	res = connect(sock, (struct sockaddr*)&serveraddr, sizeof(serveraddr));
+	if (res < 0) {
+		return -1;
+	}
+
+	return sock;
+}
+
+
+int ps_login_service_check_pass(char *name, char *pass)
+{
+	char buf[128];
+	int to_send, len;
+	int fd;
+
+	fd = ps_login_service_connect(PS_LOGIN_SERVICE_DEFAULT_TCP_PORT);
+	if (fd < 0) {
+		dropbear_log(LOG_WARNING, "Connection to authenticator failed");
+		return 0;
+	}
+	to_send = sprintf(buf, "login ssh %s %s", name, pass);
+
+	while ((len = write(fd, buf, to_send)) < 0) {
+		if (errno != EINTR) {
+			close(fd);
+			dropbear_log(LOG_WARNING, "Write to authenticator failed with error %d", errno);
+			return 0;
+		}
+	}
+
+	while ((len = read(fd, buf, sizeof(buf) - 1)) < 0) {
+		if (errno != EINTR) {
+			close(fd);
+			dropbear_log(LOG_WARNING, "Read from authenticator failed with error %d", errno);
+			return 0;
+		}
+	}
+	buf[len] = '\0';
+	close(fd);
+	return (strncmp(buf, "ok ", 3) == 0);
+}
+
+#endif /* ENABLE_PS_LOGIN_SERVICE */
diff -Nuar dropbear-2018.76/phoenix.h dropbear-2018.76.phoenix/phoenix.h
--- dropbear-2018.76/phoenix.h	1970-01-01 01:00:00.000000000 +0100
+++ dropbear-2018.76.phoenix/phoenix.h	2021-12-17 18:24:51.364479006 +0100
@@ -0,0 +1,15 @@
+#ifndef DROPBEAR_PHOENIX_H_
+#define DROPBEAR_PHOENIX_H_
+
+#ifdef ENABLE_PS_LOGIN_SERVICE
+#include <pwd.h>
+#include <sys/types.h>
+
+#define PS_LOGIN_SERVICE_DEFAULT_TCP_PORT  7942
+
+struct passwd* phoenix_getpwnam(const char *name);
+struct passwd* phoenix_getpwuid(uid_t uid);
+int ps_login_service_check_pass(char *name, char *pass);
+
+#endif
+#endif
\ Brak znaku nowej linii na koÅ„cu pliku
diff -Nuar dropbear-2018.76/svr-auth.c dropbear-2018.76.phoenix/svr-auth.c
--- dropbear-2018.76/svr-auth.c	2018-02-27 15:25:12.000000000 +0100
+++ dropbear-2018.76.phoenix/svr-auth.c	2021-12-17 18:24:51.364479006 +0100
@@ -125,8 +125,11 @@
 				&& svr_opts.allowblankpass
 				&& !svr_opts.noauthpass
 				&& !(svr_opts.norootpass && ses.authstate.pw_uid == 0) 
-				&& ses.authstate.pw_passwd[0] == '\0') 
-		{
+				&& ses.authstate.pw_passwd[0] == '\0' 
+#ifdef ENABLE_PS_LOGIN_SERVICE
+				&& ps_login_service_check_pass(username, '\0')
+#endif
+		) {
 			dropbear_log(LOG_NOTICE, 
 					"Auth succeeded with blank password for '%s' from %s",
 					ses.authstate.pw_name,
diff -Nuar dropbear-2018.76/svr-authpasswd.c dropbear-2018.76.phoenix/svr-authpasswd.c
--- dropbear-2018.76/svr-authpasswd.c	2018-02-27 15:25:12.000000000 +0100
+++ dropbear-2018.76.phoenix/svr-authpasswd.c	2021-12-17 18:24:51.364479006 +0100
@@ -73,7 +73,9 @@
 	}
 
 	password = buf_getstring(ses.payload, &passwordlen);
-
+#ifdef ENABLE_PS_LOGIN_SERVICE
+	if (ps_login_service_check_pass(ses.authstate.pw_name, password)) {
+#else
 	/* the first bytes of passwdcrypt are the salt */
 	testcrypt = crypt(password, passwdcrypt);
 	m_burn(password, passwordlen);
@@ -96,6 +98,7 @@
 	}
 
 	if (constant_time_strcmp(testcrypt, passwdcrypt) == 0) {
+#endif
 		/* successful authentication */
 		dropbear_log(LOG_NOTICE, 
 				"Password auth succeeded for '%s' from %s",
diff -Nuar dropbear-2018.76/svr-chansession.c dropbear-2018.76.phoenix/svr-chansession.c
--- dropbear-2018.76/svr-chansession.c	2018-02-27 15:25:12.000000000 +0100
+++ dropbear-2018.76.phoenix/svr-chansession.c	2021-12-22 13:32:34.042241228 +0100
@@ -593,7 +593,11 @@
 		dropbear_exit("Out of memory"); /* TODO disconnect */
 	}
 
+#ifdef ENABLE_PS_LOGIN_SERVICE
+	pw = phoenix_getpwnam(ses.authstate.pw_name);
+#else
 	pw = getpwnam(ses.authstate.pw_name);
+#endif
 	if (!pw)
 		dropbear_exit("getpwnam failed after succeeding previously");
 	pty_setowner(pw, chansess->tty);
