diff -ruN a/src/mod_compress.c b/src/mod_compress.c
--- a/src/mod_compress.c	2022-02-22 17:15:22.009713645 +0100
+++ b/src/mod_compress.c	2022-02-24 13:36:20.916095957 +0100
@@ -501,17 +501,23 @@
 		buffer_append_string_buffer(p->ofn, con->uri.path);
 	}
 
+	buffer_reset(p->b);
+	buffer_copy_buffer(p->b, con->physical.path);
+
 	switch(type) {
 	case HTTP_ACCEPT_ENCODING_GZIP:
 	case HTTP_ACCEPT_ENCODING_X_GZIP:
 		buffer_append_string_len(p->ofn, CONST_STR_LEN("-gzip-"));
+		buffer_append_string_len(p->b, CONST_STR_LEN(".gz"));
 		break;
 	case HTTP_ACCEPT_ENCODING_DEFLATE:
 		buffer_append_string_len(p->ofn, CONST_STR_LEN("-deflate-"));
+		buffer_append_string_len(p->b, CONST_STR_LEN(".deflate"));
 		break;
 	case HTTP_ACCEPT_ENCODING_BZIP2:
 	case HTTP_ACCEPT_ENCODING_X_BZIP2:
 		buffer_append_string_len(p->ofn, CONST_STR_LEN("-bzip2-"));
+		buffer_append_string_len(p->b, CONST_STR_LEN(".bz2"));
 		break;
 	default:
 		log_error_write(srv, __FILE__, __LINE__, "sd", "unknown compression type", type);
@@ -520,6 +526,11 @@
 
 	buffer_append_string_buffer(p->ofn, sce->etag);
 
+	if (access(p->b->ptr, R_OK) == 0) {
+		buffer_copy_buffer(con->physical.path, p->b);
+		return 0;
+	}
+
 	if (HANDLER_ERROR != stat_cache_get_entry(srv, con, p->ofn, &sce_ofn)) {
 		if (0 == sce->st.st_size) return -1; /* cache file being created */
 		/* cache-entry exists */
