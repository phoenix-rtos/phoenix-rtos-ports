--- a/product-mini/platforms/posix/main.c	2025-09-15 11:11:18.000000000 +0200
+++ b/product-mini/platforms/posix/main.c	2025-09-30 10:31:24.988088154 +0200
@@ -3,9 +3,6 @@
  * SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
  */
 
-#ifndef _GNU_SOURCE
-#define _GNU_SOURCE
-#endif
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
@@ -20,9 +17,6 @@
 
 #include "../common/wasm_proposal.c"
 
-#if BH_HAS_DLFCN
-#include <dlfcn.h>
-#endif
 
 static int app_argc;
 static char **app_argv;
@@ -42,44 +36,16 @@
 #if WASM_ENABLE_INTERP != 0
     printf("  --interp                 Run the wasm app with interpreter mode\n");
 #endif
-#if WASM_ENABLE_FAST_JIT != 0
-    printf("  --fast-jit               Run the wasm app with fast jit mode\n");
-#endif
-#if WASM_ENABLE_JIT != 0
-    printf("  --llvm-jit               Run the wasm app with llvm jit mode\n");
-#endif
-#if WASM_ENABLE_JIT != 0 && WASM_ENABLE_FAST_JIT != 0 && WASM_ENABLE_LAZY_JIT != 0
-    printf("  --multi-tier-jit         Run the wasm app with multi-tier jit mode\n");
-#endif
     printf("  --stack-size=n           Set maximum stack size in bytes, default is 64 KB\n");
 #if WASM_ENABLE_LIBC_WASI !=0
     printf("  --heap-size=n            Set maximum heap size in bytes, default is 0 KB when libc wasi is enabled\n");
 #else
-    printf("  --heap-size=n            Set maximum heap size in bytes, default is 16 KB when libc wasi is diabled\n");
-#endif
-#if WASM_ENABLE_FAST_JIT != 0
-    printf("  --jit-codecache-size=n   Set fast jit maximum code cache size in bytes,\n");
-    printf("                           default is %u KB\n", FAST_JIT_DEFAULT_CODE_CACHE_SIZE / 1024);
+    printf("  --heap-size=n            Set maximum heap size in bytes, default is 16 KB when libc wasi is disabled\n");
 #endif
 #if WASM_ENABLE_GC != 0
     printf("  --gc-heap-size=n         Set maximum gc heap size in bytes,\n");
     printf("                           default is %u KB\n", GC_HEAP_SIZE_DEFAULT / 1024);
 #endif
-#if WASM_ENABLE_JIT != 0
-    printf("  --llvm-jit-size-level=n  Set LLVM JIT size level, default is 3\n");
-    printf("  --llvm-jit-opt-level=n   Set LLVM JIT optimization level, default is 3\n");
-#if defined(os_writegsbase)
-    printf("  --enable-segue[=<flags>] Enable using segment register GS as the base address of\n");
-    printf("                           linear memory, which may improve performance, flags can be:\n");
-    printf("                              i32.load, i64.load, f32.load, f64.load, v128.load,\n");
-    printf("                              i32.store, i64.store, f32.store, f64.store, v128.store\n");
-    printf("                           Use comma to separate, e.g. --enable-segue=i32.load,i64.store\n");
-    printf("                           and --enable-segue means all flags are added.\n");
-#endif
-#endif /* WASM_ENABLE_JIT != 0*/
-#if WASM_ENABLE_LINUX_PERF != 0
-    printf("  --enable-linux-perf      Enable linux perf support. It works in aot and llvm-jit.\n");
-#endif
     printf("  --repl                   Start a very simple REPL (read-eval-print-loop) mode\n"
            "                           that runs commands in the form of \"FUNC ARG...\"\n");
 #if WASM_CONFIGURABLE_BOUNDS_CHECKS != 0
@@ -88,11 +54,6 @@
 #if WASM_ENABLE_LIBC_WASI != 0
     libc_wasi_print_help();
 #endif
-#if BH_HAS_DLFCN
-    printf("  --native-lib=<lib>       Register native libraries to the WASM module, which\n");
-    printf("                           are shared object (.so) files, for example:\n");
-    printf("                             --native-lib=test1.so --native-lib=test2.so\n");
-#endif
 #if WASM_ENABLE_MULTI_MODULE != 0
     printf("  --module-path=<path>     Indicate a module search path. default is current\n"
            "                           directory('./')\n");
@@ -105,13 +66,6 @@
     printf("                           If it expires, the runtime aborts the execution\n");
     printf("                           with a trap.\n");
 #endif
-#if WASM_ENABLE_DEBUG_INTERP != 0
-    printf("  -g=ip:port               Set the debug sever address, default is debug disabled\n");
-    printf("                             if port is 0, then a random port will be used\n");
-#endif
-#if WASM_ENABLE_STATIC_PGO != 0
-    printf("  --gen-prof-file=<path>   Generate LLVM PGO (Profile-Guided Optimization) profile file\n");
-#endif
     printf("  --version                Show version information\n");
     return 1;
 }
@@ -219,183 +173,6 @@
     return NULL;
 }
 
-#if WASM_ENABLE_JIT != 0
-static uint32
-resolve_segue_flags(char *str_flags)
-{
-    uint32 segue_flags = 0;
-    int32 flag_count, i;
-    char **flag_list;
-
-    flag_list = split_string(str_flags, &flag_count, ",");
-    if (flag_list) {
-        for (i = 0; i < flag_count; i++) {
-            if (!strcmp(flag_list[i], "i32.load")) {
-                segue_flags |= 1 << 0;
-            }
-            else if (!strcmp(flag_list[i], "i64.load")) {
-                segue_flags |= 1 << 1;
-            }
-            else if (!strcmp(flag_list[i], "f32.load")) {
-                segue_flags |= 1 << 2;
-            }
-            else if (!strcmp(flag_list[i], "f64.load")) {
-                segue_flags |= 1 << 3;
-            }
-            else if (!strcmp(flag_list[i], "v128.load")) {
-                segue_flags |= 1 << 4;
-            }
-            else if (!strcmp(flag_list[i], "i32.store")) {
-                segue_flags |= 1 << 8;
-            }
-            else if (!strcmp(flag_list[i], "i64.store")) {
-                segue_flags |= 1 << 9;
-            }
-            else if (!strcmp(flag_list[i], "f32.store")) {
-                segue_flags |= 1 << 10;
-            }
-            else if (!strcmp(flag_list[i], "f64.store")) {
-                segue_flags |= 1 << 11;
-            }
-            else if (!strcmp(flag_list[i], "v128.store")) {
-                segue_flags |= 1 << 12;
-            }
-            else {
-                /* invalid flag */
-                segue_flags = (uint32)-1;
-                break;
-            }
-        }
-        free(flag_list);
-    }
-    return segue_flags;
-}
-#endif /* end of WASM_ENABLE_JIT != 0 */
-
-#if BH_HAS_DLFCN
-struct native_lib {
-    void *handle;
-
-    uint32 (*get_native_lib)(char **p_module_name,
-                             NativeSymbol **p_native_symbols);
-    int (*init_native_lib)(void);
-    void (*deinit_native_lib)(void);
-
-    char *module_name;
-    NativeSymbol *native_symbols;
-    uint32 n_native_symbols;
-};
-
-struct native_lib *
-load_native_lib(const char *name)
-{
-    struct native_lib *lib = wasm_runtime_malloc(sizeof(*lib));
-    if (lib == NULL) {
-        LOG_WARNING("warning: failed to load native library %s because of "
-                    "allocation failure",
-                    name);
-        goto fail;
-    }
-    memset(lib, 0, sizeof(*lib));
-
-    /* open the native library */
-    if (!(lib->handle = dlopen(name, RTLD_NOW | RTLD_GLOBAL))
-        && !(lib->handle = dlopen(name, RTLD_LAZY))) {
-        LOG_WARNING("warning: failed to load native library %s. %s", name,
-                    dlerror());
-        goto fail;
-    }
-
-    lib->init_native_lib = dlsym(lib->handle, "init_native_lib");
-    lib->get_native_lib = dlsym(lib->handle, "get_native_lib");
-    lib->deinit_native_lib = dlsym(lib->handle, "deinit_native_lib");
-
-    if (!lib->get_native_lib) {
-        LOG_WARNING("warning: failed to lookup `get_native_lib` function "
-                    "from native lib %s",
-                    name);
-        goto fail;
-    }
-
-    if (lib->init_native_lib) {
-        int ret = lib->init_native_lib();
-        if (ret != 0) {
-            LOG_WARNING("warning: `init_native_lib` function from native "
-                        "lib %s failed with %d",
-                        name, ret);
-            goto fail;
-        }
-    }
-
-    lib->n_native_symbols =
-        lib->get_native_lib(&lib->module_name, &lib->native_symbols);
-
-    /* register native symbols */
-    if (!(lib->n_native_symbols > 0 && lib->module_name && lib->native_symbols
-          && wasm_runtime_register_natives(
-              lib->module_name, lib->native_symbols, lib->n_native_symbols))) {
-        LOG_WARNING("warning: failed to register native lib %s", name);
-        if (lib->deinit_native_lib) {
-            lib->deinit_native_lib();
-        }
-        goto fail;
-    }
-    return lib;
-fail:
-    if (lib != NULL) {
-        if (lib->handle != NULL) {
-            dlclose(lib->handle);
-        }
-        wasm_runtime_free(lib);
-    }
-    return NULL;
-}
-
-static uint32
-load_and_register_native_libs(const char **native_lib_list,
-                              uint32 native_lib_count,
-                              struct native_lib **native_lib_loaded_list)
-{
-    uint32 i, native_lib_loaded_count = 0;
-
-    for (i = 0; i < native_lib_count; i++) {
-        struct native_lib *lib = load_native_lib(native_lib_list[i]);
-        if (lib == NULL) {
-            continue;
-        }
-        native_lib_loaded_list[native_lib_loaded_count++] = lib;
-    }
-
-    return native_lib_loaded_count;
-}
-
-static void
-unregister_and_unload_native_libs(uint32 native_lib_count,
-                                  struct native_lib **native_lib_loaded_list)
-{
-    uint32 i;
-
-    for (i = 0; i < native_lib_count; i++) {
-        struct native_lib *lib = native_lib_loaded_list[i];
-
-        /* unregister native symbols */
-        if (!wasm_runtime_unregister_natives(lib->module_name,
-                                             lib->native_symbols)) {
-            LOG_WARNING("warning: failed to unregister native lib %p",
-                        lib->handle);
-            continue;
-        }
-
-        if (lib->deinit_native_lib) {
-            lib->deinit_native_lib();
-        }
-
-        dlclose(lib->handle);
-        wasm_runtime_free(lib);
-    }
-}
-#endif /* BH_HAS_DLFCN */
-
 #if WASM_ENABLE_MULTI_MODULE != 0
 static char *
 handle_module_path(const char *module_path)
@@ -415,10 +192,6 @@
     if (module_type == Wasm_Module_Bytecode)
         file_format = ".wasm";
 #endif
-#if WASM_ENABLE_AOT != 0
-    if (module_type == Wasm_Module_AoT)
-        file_format = ".aot";
-#endif
     bh_assert(file_format);
     const char *format = "%s/%s%s";
     int sz = strlen(module_search_path) + strlen("/") + strlen(module_name)
@@ -490,44 +263,6 @@
 }
 #endif /* end of WASM_ENABLE_GLOBAL_HEAP_POOL */
 
-#if WASM_ENABLE_STATIC_PGO != 0
-static void
-dump_pgo_prof_data(wasm_module_inst_t module_inst, const char *path)
-{
-    char *buf;
-    uint32 len;
-    FILE *file;
-
-    if (!(len = wasm_runtime_get_pgo_prof_data_size(module_inst))) {
-        printf("failed to get LLVM PGO profile data size\n");
-        return;
-    }
-
-    if (!(buf = wasm_runtime_malloc(len))) {
-        printf("allocate memory failed\n");
-        return;
-    }
-
-    if (len != wasm_runtime_dump_pgo_prof_data_to_buf(module_inst, buf, len)) {
-        printf("failed to dump LLVM PGO profile data\n");
-        wasm_runtime_free(buf);
-        return;
-    }
-
-    if (!(file = fopen(path, "wb"))) {
-        printf("failed to create file %s", path);
-        wasm_runtime_free(buf);
-        return;
-    }
-    fwrite(buf, len, 1, file);
-    fclose(file);
-
-    wasm_runtime_free(buf);
-
-    printf("LLVM raw profile file %s was generated.\n", path);
-}
-#endif
-
 #if WASM_ENABLE_THREAD_MGR != 0
 struct timeout_arg {
     uint32 timeout_ms;
@@ -564,6 +299,9 @@
 }
 #endif
 
+extern NativeSymbol native_symbols[];
+extern int n_native_symbols;
+
 int
 main(int argc, char *argv[])
 {
@@ -578,25 +316,13 @@
 #else
     uint32 heap_size = 16 * 1024;
 #endif
-#if WASM_ENABLE_FAST_JIT != 0
-    uint32 jit_code_cache_size = FAST_JIT_DEFAULT_CODE_CACHE_SIZE;
-#endif
 #if WASM_ENABLE_GC != 0
     uint32 gc_heap_size = GC_HEAP_SIZE_DEFAULT;
 #endif
-#if WASM_ENABLE_JIT != 0
-    uint32 llvm_jit_size_level = 3;
-    uint32 llvm_jit_opt_level = 3;
-    uint32 segue_flags = 0;
-#endif
-#if WASM_ENABLE_LINUX_PERF != 0
-    bool enable_linux_perf = false;
-#endif
     wasm_module_t wasm_module = NULL;
     wasm_module_inst_t wasm_module_inst = NULL;
     RunningMode running_mode = 0;
     RuntimeInitArgs init_args;
-    struct InstantiationArgs2 *inst_args;
     char error_buf[128] = { 0 };
 #if WASM_ENABLE_LOG != 0
     int log_verbose_level = 2;
@@ -609,19 +335,6 @@
 #if WASM_ENABLE_LIBC_WASI != 0
     libc_wasi_parse_context_t wasi_parse_ctx;
 #endif
-#if BH_HAS_DLFCN
-    const char *native_lib_list[8] = { NULL };
-    uint32 native_lib_count = 0;
-    struct native_lib *native_lib_loaded_list[8];
-    uint32 native_lib_loaded_count = 0;
-#endif
-#if WASM_ENABLE_DEBUG_INTERP != 0
-    char *ip_addr = NULL;
-    int instance_port = 0;
-#endif
-#if WASM_ENABLE_STATIC_PGO != 0
-    const char *gen_prof_file = NULL;
-#endif
 #if WASM_ENABLE_THREAD_MGR != 0
     int timeout_ms = -1;
 #endif
@@ -644,22 +357,6 @@
             running_mode = Mode_Interp;
         }
 #endif
-#if WASM_ENABLE_FAST_JIT != 0
-        else if (!strcmp(argv[0], "--fast-jit")) {
-            running_mode = Mode_Fast_JIT;
-        }
-#endif
-#if WASM_ENABLE_JIT != 0
-        else if (!strcmp(argv[0], "--llvm-jit")) {
-            running_mode = Mode_LLVM_JIT;
-        }
-#endif
-#if WASM_ENABLE_JIT != 0 && WASM_ENABLE_FAST_JIT != 0 \
-    && WASM_ENABLE_LAZY_JIT != 0
-        else if (!strcmp(argv[0], "--multi-tier-jit")) {
-            running_mode = Mode_Multi_Tier_JIT;
-        }
-#endif
 #if WASM_ENABLE_LOG != 0
         else if (!strncmp(argv[0], "-v=", 3)) {
             log_verbose_level = atoi(argv[0] + 3);
@@ -685,13 +382,6 @@
                 return print_help();
             heap_size = atoi(argv[0] + 12);
         }
-#if WASM_ENABLE_FAST_JIT != 0
-        else if (!strncmp(argv[0], "--jit-codecache-size=", 21)) {
-            if (argv[0][21] == '\0')
-                return print_help();
-            jit_code_cache_size = atoi(argv[0] + 21);
-        }
-#endif
 #if WASM_ENABLE_GC != 0
         else if (!strncmp(argv[0], "--gc-heap-size=", 15)) {
             if (argv[0][15] == '\0')
@@ -699,64 +389,6 @@
             gc_heap_size = atoi(argv[0] + 15);
         }
 #endif
-#if WASM_ENABLE_JIT != 0
-        else if (!strncmp(argv[0], "--llvm-jit-size-level=", 22)) {
-            if (argv[0][22] == '\0')
-                return print_help();
-            llvm_jit_size_level = atoi(argv[0] + 22);
-            if (llvm_jit_size_level < 1) {
-                printf("LLVM JIT size level shouldn't be smaller than 1, "
-                       "setting it to 1\n");
-                llvm_jit_size_level = 1;
-            }
-            else if (llvm_jit_size_level > 3) {
-                printf("LLVM JIT size level shouldn't be greater than 3, "
-                       "setting it to 3\n");
-                llvm_jit_size_level = 3;
-            }
-        }
-        else if (!strncmp(argv[0], "--llvm-jit-opt-level=", 21)) {
-            if (argv[0][21] == '\0')
-                return print_help();
-            llvm_jit_opt_level = atoi(argv[0] + 21);
-            if (llvm_jit_opt_level < 1) {
-                printf("LLVM JIT opt level shouldn't be smaller than 1, "
-                       "setting it to 1\n");
-                llvm_jit_opt_level = 1;
-            }
-            else if (llvm_jit_opt_level > 3) {
-                printf("LLVM JIT opt level shouldn't be greater than 3, "
-                       "setting it to 3\n");
-                llvm_jit_opt_level = 3;
-            }
-        }
-        else if (!strcmp(argv[0], "--enable-segue")) {
-            /* all flags are enabled */
-            segue_flags = 0x1F1F;
-        }
-        else if (!strncmp(argv[0], "--enable-segue=", 15)) {
-            segue_flags = resolve_segue_flags(argv[0] + 15);
-            if (segue_flags == (uint32)-1)
-                return print_help();
-        }
-#endif /* end of WASM_ENABLE_JIT != 0 */
-#if BH_HAS_DLFCN
-        else if (!strncmp(argv[0], "--native-lib=", 13)) {
-            if (argv[0][13] == '\0')
-                return print_help();
-            if (native_lib_count >= sizeof(native_lib_list) / sizeof(char *)) {
-                printf("Only allow max native lib number %d\n",
-                       (int)(sizeof(native_lib_list) / sizeof(char *)));
-                return 1;
-            }
-            native_lib_list[native_lib_count++] = argv[0] + 13;
-        }
-#endif
-#if WASM_ENABLE_LINUX_PERF != 0
-        else if (!strncmp(argv[0], "--enable-linux-perf", 19)) {
-            enable_linux_perf = true;
-        }
-#endif
 #if WASM_ENABLE_MULTI_MODULE != 0
         else if (!strncmp(argv[0],
                           "--module-path=", strlen("--module-path="))) {
@@ -780,26 +412,6 @@
             timeout_ms = atoi(argv[0] + 10);
         }
 #endif
-#if WASM_ENABLE_DEBUG_INTERP != 0
-        else if (!strncmp(argv[0], "-g=", 3)) {
-            char *port_str = strchr(argv[0] + 3, ':');
-            char *port_end;
-            if (port_str == NULL)
-                return print_help();
-            *port_str = '\0';
-            instance_port = strtoul(port_str + 1, &port_end, 10);
-            if (port_str[1] == '\0' || *port_end != '\0')
-                return print_help();
-            ip_addr = argv[0] + 3;
-        }
-#endif
-#if WASM_ENABLE_STATIC_PGO != 0
-        else if (!strncmp(argv[0], "--gen-prof-file=", 16)) {
-            if (argv[0][16] == '\0')
-                return print_help();
-            gen_prof_file = argv[0] + 16;
-        }
-#endif
         else if (!strcmp(argv[0], "--version")) {
             uint32 major, minor, patch;
             wasm_runtime_get_version(&major, &minor, &patch);
@@ -852,30 +464,10 @@
     init_args.mem_alloc_option.allocator.free_func = free_func;
 #endif
 
-#if WASM_ENABLE_FAST_JIT != 0
-    init_args.fast_jit_code_cache_size = jit_code_cache_size;
-#endif
-
 #if WASM_ENABLE_GC != 0
     init_args.gc_heap_size = gc_heap_size;
 #endif
 
-#if WASM_ENABLE_JIT != 0
-    init_args.llvm_jit_size_level = llvm_jit_size_level;
-    init_args.llvm_jit_opt_level = llvm_jit_opt_level;
-    init_args.segue_flags = segue_flags;
-#endif
-#if WASM_ENABLE_LINUX_PERF != 0
-    init_args.enable_linux_perf = enable_linux_perf;
-#endif
-
-#if WASM_ENABLE_DEBUG_INTERP != 0
-    init_args.instance_port = instance_port;
-    if (ip_addr)
-        /* ensure that init_args.ip_addr is null terminated */
-        strncpy(init_args.ip_addr, ip_addr, sizeof(init_args.ip_addr) - 1);
-#endif
-
     /* initialize runtime environment */
     if (!wasm_runtime_full_init(&init_args)) {
         printf("Init runtime environment failed.\n");
@@ -886,45 +478,18 @@
     bh_log_set_verbose_level(log_verbose_level);
 #endif
 
-#if BH_HAS_DLFCN
-    native_lib_loaded_count = load_and_register_native_libs(
-        native_lib_list, native_lib_count, native_lib_loaded_list);
-#endif
+
+    if (!wasm_runtime_register_natives("env",
+                                    native_symbols,
+                                    n_native_symbols)) {
+        goto fail1;
+    }
 
     /* load WASM byte buffer from WASM bin file */
     if (!(wasm_file_buf =
               (uint8 *)bh_read_file_to_buffer(wasm_file, &wasm_file_size)))
         goto fail1;
 
-#if WASM_ENABLE_AOT != 0
-    if (wasm_runtime_is_xip_file(wasm_file_buf, wasm_file_size)) {
-        uint8 *wasm_file_mapped;
-        uint8 *daddr;
-        int map_prot = MMAP_PROT_READ | MMAP_PROT_WRITE | MMAP_PROT_EXEC;
-        int map_flags = MMAP_MAP_32BIT;
-
-        if (!(wasm_file_mapped = os_mmap(NULL, (uint32)wasm_file_size, map_prot,
-                                         map_flags, os_get_invalid_handle()))) {
-            printf("mmap memory failed\n");
-            wasm_runtime_free(wasm_file_buf);
-            goto fail1;
-        }
-
-#if (WASM_MEM_DUAL_BUS_MIRROR != 0)
-        daddr = os_get_dbus_mirror(wasm_file_mapped);
-#else
-        daddr = wasm_file_mapped;
-#endif
-        bh_memcpy_s(daddr, wasm_file_size, wasm_file_buf, wasm_file_size);
-#if (WASM_MEM_DUAL_BUS_MIRROR != 0)
-        os_dcache_flush();
-#endif
-        wasm_runtime_free(wasm_file_buf);
-        wasm_file_buf = wasm_file_mapped;
-        is_xip_file = true;
-    }
-#endif
-
 #if WASM_ENABLE_MULTI_MODULE != 0
     wasm_runtime_set_module_reader(module_reader_callback,
                                    module_destroyer_callback);
@@ -937,33 +502,14 @@
         goto fail2;
     }
 
-#if WASM_ENABLE_DYNAMIC_AOT_DEBUG != 0
-    if (!wasm_runtime_set_module_name(wasm_module, wasm_file, error_buf,
-                                      sizeof(error_buf))) {
-        printf("set aot module name failed in dynamic aot debug mode, %s\n",
-               error_buf);
-        goto fail3;
-    }
-#endif
-
 #if WASM_ENABLE_LIBC_WASI != 0
     libc_wasi_init(wasm_module, argc, argv, &wasi_parse_ctx);
 #endif
 
-    if (!wasm_runtime_instantiation_args_create(&inst_args)) {
-        printf("failed to create instantiate args\n");
-        goto fail3;
-    }
-    wasm_runtime_instantiation_args_set_default_stack_size(inst_args,
-                                                           stack_size);
-    wasm_runtime_instantiation_args_set_host_managed_heap_size(inst_args,
-                                                               heap_size);
-
     /* instantiate the module */
-    wasm_module_inst = wasm_runtime_instantiate_ex2(
-        wasm_module, inst_args, error_buf, sizeof(error_buf));
-    wasm_runtime_instantiation_args_destroy(inst_args);
-    if (!wasm_module_inst) {
+    if (!(wasm_module_inst =
+              wasm_runtime_instantiate(wasm_module, stack_size, heap_size,
+                                       error_buf, sizeof(error_buf)))) {
         printf("%s\n", error_buf);
         goto fail3;
     }
@@ -974,23 +520,6 @@
     }
 #endif
 
-#if WASM_ENABLE_DEBUG_INTERP != 0
-    if (ip_addr != NULL) {
-        wasm_exec_env_t exec_env =
-            wasm_runtime_get_exec_env_singleton(wasm_module_inst);
-        uint32_t debug_port;
-        if (exec_env == NULL) {
-            printf("%s\n", wasm_runtime_get_exception(wasm_module_inst));
-            goto fail4;
-        }
-        debug_port = wasm_runtime_start_debug_instance(exec_env);
-        if (debug_port == 0) {
-            printf("Failed to start debug instance\n");
-            goto fail4;
-        }
-    }
-#endif
-
 #if WASM_ENABLE_THREAD_MGR != 0
     struct timeout_arg timeout_arg;
     korp_tid timeout_tid;
@@ -1037,12 +566,6 @@
     if (exception)
         printf("%s\n", exception);
 
-#if WASM_ENABLE_STATIC_PGO != 0 && WASM_ENABLE_AOT != 0
-    if (get_package_type(wasm_file_buf, wasm_file_size) == Wasm_Module_AoT
-        && gen_prof_file)
-        dump_pgo_prof_data(wasm_module_inst, gen_prof_file);
-#endif
-
 #if WASM_ENABLE_THREAD_MGR != 0
     if (timeout_ms >= 0) {
         timeout_arg.cancel = true;
@@ -1053,9 +576,6 @@
 #if WASM_ENABLE_THREAD_MGR != 0
 fail5:
 #endif
-#if WASM_ENABLE_DEBUG_INTERP != 0
-fail4:
-#endif
     /* destroy the module instance */
     wasm_runtime_deinstantiate(wasm_module_inst);
 
@@ -1071,11 +591,6 @@
         os_munmap(wasm_file_buf, wasm_file_size);
 
 fail1:
-#if BH_HAS_DLFCN
-    /* unload the native libraries */
-    unregister_and_unload_native_libs(native_lib_loaded_count,
-                                      native_lib_loaded_list);
-#endif
 
     /* destroy runtime environment */
     wasm_runtime_destroy();
