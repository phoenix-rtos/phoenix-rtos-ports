#  This file is a pro forma TET execution configuration parameter file.
#  The values contained in this file must be modified for the target
#  system.  Where no default value is specified, leaving the parameter
#  unset will usually cause Unresolved or Uninitiated test results.

#
#  General Parameters - required for all subsets
#

#	VSX test mode and test packages used.
#	Set automatically - do not alter.
TEST_MODE=POSIX96
TEST_PACKAGES=VSX-PCTS2.0

#	Source directory for VSX.
VSXDIR=

#	Debugging flags.
#	Example: t:d,trace:l,2
#	Default: no debugging output
VSX_DBUG_FLAGS=

#	Debug output file.
#	Default: debugging output is written to stderr
VSX_DBUG_FILE=stderr

#	Test Run Name.
#	Default: (blank)
VSX_NAME=

#	Operator Name.
#	Default: (blank)
VSX_OPER=root

#	Organisation.
#	Default: (blank)
VSX_ORG=Phoenix Systems

#	Command search path.
#	Default: .:/bin:/usr/bin
VSX_PATH=/bin:/usr/bin

#	System Name.
#	Default: (blank)
VSX_SYS=Phoenix-RTOS

#	User ID's of users vsx0, vsx1 and vsx2.
VSX_UID0=2000
VSX_UID1=2001
VSX_UID2=2002

#	Group ID's of groups vsxg0, vsxg1 and vsxg2.
VSX_GID0=2000
VSX_GID1=2001
VSX_GID2=2002

#	List of non-standard signal numbers to set to be ignored.
#	Many systems will need to include the signal number for SIGSYS.
#	Example: 12,42
#	Default: all non-standard signals are caught
TET_SIG_IGN=

#	List of non-standard signal numbers to leave alone.
#	Used for signals which cause problems if set to be caught.
#	Example: 43, 44
#	Default: all non-standard signals are caught
TET_SIG_LEAVE=

#
#  Compiler Characteristics - required for subsets with header tests
#

#	C compiler.
#	This can be a shell script if required (e.g. if the compiler
#	outputs a copyright line, the script should suppress it).
#	Default: /bin/cc
VSX_CC=

#	C compiler flags.
#	This parameter must NOT define _XOPEN_SOURCE, _POSIX_SOURCE,
#	_POSIX_C_SOURCE, or _XOPEN_SOURCE_EXTENDED.
VSX_CFLAGS=

#	C compiler libraries, and linker flags.
#	Usually contains the libraries and linker flags used in the MLIB,
#	SYSLIBS and LDFLAGS parameters in SRC/vsxparams.
#	Default: -lm
VSX_LIBS=

#
#  Operating System Characteristics - common to multiple subsets
#

#	Block special file name.
#	Set to "unsup" if block special files are not supported.
VSX_BLKDEV_FILE=

#	Character special file name.
#	Set to "unsup" if character special files are not supported.
VSX_CHRDEV_FILE=/dev/ttyS0

#	Does fcntl() detect EDEADLK? (Y/N)
VSX_FCNTL_EDEADLK=N

#	Maximum number of file locks settable by fcntl().
#	May be set to -1 if there is no practical limit.
VSX_FCNTL_MAXLOCK=-1

#	Invalid cmd value for fcntl().
#	Default: -1
VSX_INVALID_FCNTL_CMD=

#	Invalid group ID.
#	Set to "unsup" if all gid_t values are valid group IDs.
VSX_INVALID_GID=unsup

#	Group name not in group database.
#	Default: "nogroup"
VSX_INVALID_GNAME=nogroup

#	User name not in user database.
#	Default: "nouser"
VSX_INVALID_PNAME=nouser

#	Invalid user ID.
#	Set to "unsup" if all uid_t values are valid user IDs.
VSX_INVALID_UID=9999

#	Invalid "whence" value for lseek(), fseek() and fcntl().
#	Default: -1
VSX_INVALID_WHENCE=-1

#	Invalid signal number.
#	Default: -1
VSX_INVAL_SIG=-1

#	Mountable file system.
#	Can be the same as VSX_ROFS and VSX_NOSPC_DEV.
VSX_MOUNT_DEV=NOSPC_DEV

#	Mountable file system filled by filldisc.sh.
#	Can be the same as VSX_MOUNT_DEV and VSX_ROFS.
VSX_NOSPC_DEV=NOSPC_DEV

#	Shared executable file.
#	Set to "unsup" if shared executables are not supported.
VSX_PURE_FILE=unsup

#	Does readdir() detect EBADF? (Y/N)
VSX_READDIR_EBADF=N

#	File system which can be mounted read only.
#	Can be the same as VSX_MOUNT_DEV and VSX_NOSPC_DEV.
#	Set to "unsup" if read only file systems are not supported.
VSX_ROFS=unsup

#	Can sigaddset() and sigdelset() give EINVAL? (Y/N)
VSX_SIGSET_EINVAL=Y

#	Maximum number of files that can be open on the system.
#	May be set to -1 if there is no practical limit.
VSX_SYS_OPEN_MAX=-1

#	File name of the terminal the tests are running on.
VSX_TTYNAME=/dev/console

#	User logged onto VSX_TTYNAME.
VSX_TTYUSER=

#	Minimum number of blocks for use with setlimit().
#	May be set to -1 if setting a file size limit is not supported.
#	Example: 2
VSX_ULIMIT_BLKS=-1

#	Name of a file which cannot be locked.
#	Must be readable and writable by user vsx0 or group vsxg0.
#	Set to "unsup" if no unlockable file exists.
VSX_UNLOCKABLE_FILE=unsup

#	Unused (valid) group ID.
#	Set to "unsup" if all unused group ID's are invalid.
VSX_UNUSED_GID=unsup

#	Unused (valid) user ID.
#	Set to "unsup" if all unused user ID's are invalid.
VSX_UNUSED_UID=unsup

#
#  Terminal Interface Parameters - common to multiple subsets
#
#  Note: If the system does not provide any devices which support the
#  general terminal interface, the VSX_TERMIOS_TTY and VSX_TERMIOS_LOOP
#  parameters should be set to "unsup".  In this case the remaining
#  parameters are not used.
#

#	Terminal device to be used as controlling terminal.
#	Set to "unsup" if no devices support the general terminal interface.
VSX_TERMIOS_TTY=/dev/pts/XXX

#	Terminal device connected to VSX_TERMIOS_TTY by loopback.
#	Set to "unsup" if no devices support the general terminal interface.
VSX_TERMIOS_LOOP=/dev/pts/XXX

#	Master side of pseudo-terminal pair for which VSX_TERMIOS_TTY
#	is the slave.  Leave unset if VSX_TERMIOS_TTY is not a pseudo-
#	terminal.  If this is a clone device, VSX_TERMIOS_TTY must be
#	set to a dummy slave name long enough to be overwritten with
#	the real name when it is obtained.
VSX_MASTER_TTY=/dev/ptmx

#	Master side of pseudo-terminal pair for which VSX_TERMIOS_LOOP
#	is the slave.  Leave unset if VSX_TERMIOS_LOOP is not a pseudo-
#	terminal.  If this is a clone device, VSX_TERMIOS_LOOP must be
#	set to a dummy slave name long enough to be overwritten with
#	the real name when it is obtained.
VSX_MASTER_LOOP=/dev/ptmx

#	Are VSX_TERMIOS_TTY and VSX_TERMIOS_LOOP asynchronous serial
#	terminals? (Y/N)
#	If using pseudo-terminals, set this parameter to N.
VSX_TERMIOS_ASYNC=N

#	Is terminal output buffered? (Y/N)
VSX_TERMIOS_BUFFERED=Y

#	Normal speed setting for terminal tests.
#	If split baud rates are supported this must be the OUTPUT baud
#	rate of a supported split.
#	Example: B9600
VSX_TERMIOS_SPEED=B9600

#	Is modem control supported? (Y/N)
#	If using pseudo-terminals, set this parameter to N.
VSX_MODEM_CONTROL=N

#	Can START & STOP characters be changed? (Y/N)
VSX_START_STOP_CHNG=Y

#	Is tcgetpgrp() supported? (Y/N)
VSX_TCGETPGRP_SUPPORTED=Y

#	Is tcsetpgrp() supported? (Y/N)
VSX_TCSETPGRP_SUPPORTED=Y

#	Unsupported c_cflag value or speed.
#	Specify using c_cflag symbols, speed with leading 'B', or numeric
#	value (leading 0 for octal, 0x for hex).  Prefix with '~' for
#	bits to be cleared instead of set in c_cflag.  Set to "none" if
#	all possible c_cflag values are supported.
#	Examples: PARODD; ~PARODD; B38400; 0x100; ~020; 64
VSX_UNSUPPORTED_CFLAG=none

#	Non-default supported c_cflag value or speed.
#	This can be a c_cflag value which is not the value in effect when
#	the terminal is opened, or a speed other than VSX_TERMIOS_SPEED. 
#	The value must be unrelated to VSX_UNSUPPORTED_CFLAG.  Specify in
#	the same form as VSX_UNSUPPORTED_CFLAG.  Set to "none" if no
#	settings other than the defaults are supported.
#	Examples: CS5; B50; ~0x80; 0200; 32
VSX_SUPPORTED_CFLAG=B50

#	Erase sequence echoed when ECHOE and ECHO are set.
#	Example: \b \b
PCTS_ECHOE= 

#	Kill sequence echoed when ECHOK and ECHO are set, for kill
#	character CTRL-U (c_cc[VKILL] == '\025') and an input line
#	containing seven characters.
#	Example1: \025\n
#	Example2: \b \b\b \b\b \b\b \b\b \b\b \b\b \b
PCTS_ECHOK=

#
#  Operating System Characteristics - required for 'base' subset
#				      (both POSIX and X/Open modes)

#	Accuracy of alarm() in seconds.
#	Default: SPEEDFACTOR
VSX_AL_ACCURACY=5

#	Accuracy of clock() as a percentage.
#	Default: 5
VSX_CLOCK_ERR=5

#	Does closedir() detect EBADF? (Y/N)
VSX_CLOSEDIR_EBADF=N

#	Are floating point calculations done in software? (Y/N)
#	Default: N
VSX_FP_SOFTWARE=N

#	Invalid access mode value for access().
#	Set to "unsup" if access() does not detect EINVAL.
#	Default: -1
VSX_INVALID_AMODE=unsup

#	Invalid "_PC_..." value for pathconf().
#	Default: -1
VSX_INVALID_PC=

#	Invalid process group ID.
#	Default: -1
VSX_INVALID_PGID=

#	Invalid "_SC_..." value for sysconf().
#	Default: -1
VSX_INVALID_SC=

#	Is {_POSIX_JOB_CONTROL} behaviour supported? (Y/N)
VSX_JOB_CONTROL_SUPP=N

#	Does link() require access to the existing file? (Y/N)
#	Default: N
VSX_LINK_ACCESS_REQD=N

#	Do link() and unlink() work on directories? (Y/N/U)
#	Y = both work
#	N = neither works
#	U = only unlink() works
VSX_LINK_DIR_SUPP=N

#	Can link() be used across file systems? (Y/N)
VSX_LINK_FILESYS_SUPP=N

#	File of non executable type.
#	This must not be a regular file and must have
#	execute permission for user vsx0.
#	Set to "unsup" if all file types are executable.
#	Example: . (i.e. the current directory)
VSX_NONEXEC_FILE=.

#	Does opendir() detect EMFILE and ENFILE? (Y/N)
VSX_OPENDIR_EMNFILE=N

#	Does access() support appropriate privileges? (Y/N)
#	Default: N
VSX_PRIV_ACCESS_SUPP=N

#	Do chown() and chmod() support appropriate privileges? (Y/N)
#	Default: N
VSX_PRIV_CHOWN_SUPP=N

#	Does removing a busy directory give EBUSY? (Y/S/P/N)
#	Y = Yes, always
#	S = Yes, but only when in use by the system
#	P = Yes, but only when in use by another process
#	N = No
VSX_REMOVE_DIR_EBUSY=Y

#	Does renaming a busy directory give EBUSY? (Y/S/P/N)
#	Y = Yes, always
#	S = Yes, but only when in use by the system
#	P = Yes, but only when in use by another process
#	N = No
VSX_RENAME_DIR_EBUSY=N

#	Does rename() on directories require write access? (Y/N)
VSX_RENAME_DIR_WPERM_REQD=N

#	Is {_POSIX_SAVED_IDS} behaviour supported? (Y/N)
VSX_SAVED_IDS_SUPP=N

#	Is setting S_ISUID and S_ISGID supported? (Y/N)
VSX_SET_ID_MODES_SUPP=N

#	Is setpgid() supported? (Y/N)
#	Must be set to Y if {_POSIX_JOB_CONTROL} behaviour is supported.
VSX_SETPGID_SUPPORTED=N

#	Unsupported process group ID (> 0).
#	Set to "unsup" if all positive pid_t values are supported PGID's.
VSX_UNSUPPORTED_PGID=unsup

#
#  Operating System Characteristics - required for 'base' sub-set
#				      (X/Open modes only)

#	Invalid nl_item value for nl_langinfo().
#	Default: -1
VSX_INVALID_NL_ITEM=-1

#	Block special file for unavailable device.
#	Must be readable and writable by user vsx0 or group vsxg0.
#	Set to "unsup" if block special files are not supported.
VSX_NXIO_BLKDEV=unsup

#	Character special file for unavailable device.
#	Must be readable and writable by user vsx0 or group vsxg0.
VSX_NXIO_CHRDEV=unsup

#
#  Operating System Characteristics - required for 'base' sub-set
#				      (XPG4 and UNIX98 modes only)

#	Do basic regular expressions support anchoring in
#	subexpressions? (Y/N)
VSX_BRE_SUBANCHOR=N

#	Locale name for message catalogue testing.
#	Must be of the form language_territory.codeset
#	Example: english_uk.8859
VSX_CAT_LOCALE=

#	First codeset name for conversion by iconv().
#	Must be set to the name of the codeset associated
#	with the locales specified in SRC/wchars.cfg.
VSX_CODESET1=

#	Second codeset name for conversion by iconv().
#	Set to "unsup" if only one codeset is supported.
VSX_CODESET2=

#	Invalid "_CS_..." value for confstr().
#	Default: -1
VSX_INVALID_CS=

#	Invalid mode argument to popen().
#	Set to "unsup" if popen() does not detect EINVAL.
VSX_INVALID_POPEN_MODE=unsup

#	Is line buffered input support on terminals and pipes? (Y/T/P/N)
#	Y = supported on both
#	T = on terminals only
#	P = on pipes only
#	N = not supported
VSX_LINE_BUF_SUPP=Y

#	Is this test set being used for LSB testing? (Y/N)
#	Set to Yes for LSB testing. Set to No or leave unset for
#	POSIX or Single UNIX Specification testing.
#	Y = Yes
#	N = No
LSB_TEST=N
#
#  Fixed config variables - these must not be changed
#
TET_EXEC_IN_PLACE=True
TET_OUTPUT_CAPTURE=False

#
#  END OF PARAMETERS FILE
