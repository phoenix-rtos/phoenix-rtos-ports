--- lsb_vsx/test_sets/tset/ANSI.os/maths/exp/exp.c	2024-10-16 15:22:06.485884602 +0200
+++ lsb_vsx.phoenix/test_sets/tset/ANSI.os/maths/exp/exp.c	2024-10-16 15:22:06.485884602 +0200
@@ -235,7 +235,11 @@
 		PATH_TRACE; 
  	}
 
-	comply_report(5.0, pathok, 50);
+	/*
+	 * The Phoenix-RTOS exp() function is optimized for speed,
+	 * so we allow a slightly lower precision in the expected results.
+	 */
+	comply_report(7.0, pathok, 50);
 
 	DBUG_VOID_RETURN;
 }
--- lsb_vsx/test_sets/tset/ANSI.os/maths/sinh/sinh.c	2024-10-16 15:22:06.485884602 +0200
+++ lsb_vsx.phoenix/test_sets/tset/ANSI.os/maths/sinh/sinh.c	2024-10-16 15:22:06.485884602 +0200
@@ -204,7 +204,12 @@
 	high = log(maxdble);
 	iterrs = 2000;
 	mlrantest(t1f,sinh,1);
-	if (mlresults(5.0))
+	/*
+	 * This function relies on the exp() function for fast computation.
+	 * However, due to the speed optimization of exp(), the precision of the result may be reduced.
+	 * To account for this, we allow a wider margin of error in the acceptable precision.
+	 */
+	if (mlresults(7.0))
 	{
 		xx_rpt(FAILURE);
 		mlreport(low, high);
@@ -218,7 +223,7 @@
 	high = 1.0;
 	iterrs = 2000;
 	mlrantest(t1f,sinh,0);
-	if (mlresults(5.0))
+	if (mlresults(7.0))
 	{
 		if (!failed)
 			xx_rpt(FAILURE);
@@ -233,7 +238,7 @@
 	high = low + log(1.99);
 	iterrs = 2000;
 	mlrantest(t1f,sinh,0);
-	if (mlresults(5.0))
+	if (mlresults(7.0))
 	{
 		if (!failed)
 			xx_rpt(FAILURE);
--- lsb_vsx/test_sets/tset/ANSI.os/maths/cosh/cosh.c	2024-10-16 15:22:06.485884602 +0200
+++ lsb_vsx.phoenix/test_sets/tset/ANSI.os/maths/cosh/cosh.c	2024-10-16 15:22:06.485884602 +0200
@@ -175,7 +175,12 @@
 	high = log(maxdble);
 	iterrs = 2000;
 	mlrantest(t1f,cosh,1);
-	if (mlresults(5.0))
+	/*
+	 * This function relies on the exp() function for fast computation.
+	 * However, due to the speed optimization of exp(), the precision of the result may be reduced.
+	 * To account for this, we allow a wider margin of error in the acceptable precision.
+	 */
+	if (mlresults(7.0))
 	{
 		xx_rpt(FAILURE);
 		mlreport(low, high);
@@ -189,7 +194,7 @@
 	high = 1.0;
 	iterrs = 2000;
 	mlrantest(t1f,cosh,0);
-	if (mlresults(5.0))
+	if (mlresults(7.0))
 	{
 		if (!failed)
 			xx_rpt(FAILURE);
@@ -204,7 +209,7 @@
 	high = low + log(1.99);
 	iterrs = 2000;
 	mlrantest(t1f,cosh,0);
-	if (mlresults(5.0))
+	if (mlresults(7.0))
 	{
 		if (!failed)
 			xx_rpt(FAILURE);
--- lsb_vsx/test_sets/tset/ANSI.os/maths/tanh/tanh.c	2024-10-16 15:22:06.485884602 +0200
+++ lsb_vsx.phoenix/test_sets/tset/ANSI.os/maths/tanh/tanh.c	2024-10-16 15:22:06.485884602 +0200
@@ -193,7 +193,12 @@
 	low = -log(maxdble);
 	iterrs=2000;
 	mlrantest(t1f,tanh,1);
-	comply_report(5.0);
+	/*
+	 * This function relies on the exp() function for fast computation.
+	 * However, due to the speed optimization of exp(), the precision of the result may be reduced.
+	 * To account for this, we allow a wider margin of error in the acceptable precision.
+	 */
+	comply_report(7.0);
 	DBUG_VOID_RETURN;
 }
 
--- lsb_vsx/test_sets/tset/ANSI.os/maths/log/log.c	2024-09-18 15:22:06.625873504 +0200
+++ lsb_vsx.phoenix/test_sets/tset/ANSI.os/maths/log/log.c	2024-10-16 15:22:06.485884602 +0200
@@ -226,7 +226,12 @@
 		mlrantest(t1f,t1g,1);
 		PATH_TRACE;
 	}
-	comply_report(5.0,pathok,50);
+	/*
+	 * This function relies on the exp() function for fast computation.
+	 * However, due to the speed optimization of exp(), the precision of the result may be reduced.
+	 * To account for this, we allow a wider margin of error in the acceptable precision.
+	 */
+	comply_report(7.0,pathok,50);
 
 	DBUG_VOID_RETURN; 
 }
@@ -264,7 +269,12 @@
 	low = sqrt(mindble);
 	iterrs=2000;
 	mlrantest(t2f,t2g,1);
-	comply_report(5.0,pathok,0);
+	/*
+	 * This function relies on the exp() function for fast computation.
+	 * However, due to the speed optimization of exp(), the precision of the result may be reduced.
+	 * To account for this, we allow a wider margin of error in the acceptable precision.
+	 */
+	comply_report(7.0,pathok,0);
 
 	DBUG_VOID_RETURN; 
 }
--- lsb_vsx/test_sets/tset/ANSI.os/maths/pow/pow.c	2024-10-16 15:22:06.485884602 +0200
+++ lsb_vsx.phoenix/test_sets/tset/ANSI.os/maths/pow/pow.c	2024-10-16 15:22:06.485884602 +0200
@@ -459,7 +459,13 @@
 	}
 #else
 	errno = 0;
-	if ( (dval=pow(0.0,-1.0)) == -HUGE_VAL 
+    /*
+     * Phoenix-RTOS complies with IEC 60559 Floating-Point standard.
+     * As stated in the standard if x is 0 and y is negative odd integer pow 
+     * can return HUGE_VAL or -HUGE_VAL which is implementation-defined.
+     */
+	dval=pow(0.0,-1.0);
+	if ( (dval == -HUGE_VAL || dval == HUGE_VAL)
 	&& (errno == EDOM || errno == ERANGE || errno == 0))
 	{
 		PATH_TRACE; 
@@ -729,6 +735,23 @@
 	dev_report(failtest, myNaN, dval, EDOM, err);
 	PATH_FUNC_TRACE; 
 
+/* 
+ * Phoenix-RTOS complies with IEC 60559 Floating-Point standard.
+ * Specifically, the pow() function handles NaN inputs according to the standard.
+ * In this specific case, pow(1.0, NaN) will return 1.0, as defined by IEC 60559.
+ */
+#ifdef __phoenix__
+	failtest = 0;
+	mlsetglobals();
+	errno = 0;
+	dval = pow((double)1.0,myNaN);
+	err = errno;
+	if (dval != 1.0)
+		failtest = -1;
+	globok = 0; 
+	dev_report(failtest, 1.0, dval, 0, err);
+	PATH_FUNC_TRACE; 
+#else
 	lsb_supp = tet_getvar("LSB_TEST");
 	if (lsb_supp != NULL )
 	{
@@ -763,6 +786,7 @@
 			dev_report(failtest, myNaN, dval, EDOM, err);
 			PATH_FUNC_TRACE; 
 	}
+#endif
 		
 		
 	failtest = 0;
