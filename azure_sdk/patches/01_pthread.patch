diff -ur '--exclude=*.git' azure-iot-sdk-c-lts_01_2022/c-utility/adapters/condition_pthreads.c azure-iot-sdk-c-lts_01_2022-phoenix/c-utility/adapters/condition_pthreads.c
--- azure-iot-sdk-c-lts_01_2022/c-utility/adapters/condition_pthreads.c	2022-05-05 12:54:43.710634820 +0200
+++ azure-iot-sdk-c-lts_01_2022-phoenix/c-utility/adapters/condition_pthreads.c	2022-05-04 15:40:37.603926510 +0200
@@ -6,28 +6,18 @@
 #include "azure_c_shared_utility/condition.h"
 #include "azure_c_shared_utility/xlogging.h"
 #include <errno.h>
-#include <pthread.h>
+#include <sys/threads.h>
 #include "azure_c_shared_utility/gballoc.h"
 #include "time.h"
 #include "linux_time.h"
 
 MU_DEFINE_ENUM_STRINGS(COND_RESULT, COND_RESULT_VALUES);
 
-pthread_cond_t* create_cond(void)
+handle_t* create_cond(void)
 {
-    pthread_cond_t * cond = (pthread_cond_t*)malloc(sizeof(pthread_cond_t));
+    handle_t *cond = (handle_t*)malloc(sizeof(handle_t));
     if (cond != NULL)
-    {
-#ifdef __MACH__
-        pthread_cond_init(cond, NULL);
-#else
-        pthread_condattr_t cattr;
-        pthread_condattr_init(&cattr);
-        pthread_condattr_setclock(&cattr, time_basis);
-        pthread_cond_init(cond, &cattr);
-        pthread_condattr_destroy(&cattr);
-#endif
-    }
+        condCreate(cond);
 
     return cond;
 }
@@ -52,7 +42,7 @@
     else
     {
         // Codes_SRS_CONDITION_18_003: [ Condition_Post shall return COND_OK if it succcessfully posts the condition ]
-        if (pthread_cond_signal((pthread_cond_t*)handle) == 0)
+        if (condSignal((handle_t)handle) == 0)
         {
             result = COND_OK;
         }
@@ -79,19 +69,8 @@
         if (timeout_milliseconds > 0)
         {
             // Codes_SRS_CONDITION_18_013: [ Condition_Wait shall accept relative timeouts ]
-            struct timespec tm;
-            if (get_time_ns(&tm) != 0)
-            {
-                LogError("Failed to get the current time");
-                return COND_ERROR;
-            }
 
-            tm.tv_nsec += (timeout_milliseconds % MILLISECONDS_IN_1_SECOND) * NANOSECONDS_IN_1_MILLISECOND;
-            tm.tv_sec += timeout_milliseconds / MILLISECONDS_IN_1_SECOND;
-            // handle overflow in tv_nsec
-            tm.tv_sec+= tm.tv_nsec / NANOSECONDS_IN_1_SECOND;
-            tm.tv_nsec %= NANOSECONDS_IN_1_SECOND;
-            int wait_result = pthread_cond_timedwait((pthread_cond_t *)handle, (pthread_mutex_t *)lock, &tm);
+            int wait_result = condWait((handle_t)handle, (handle_t)lock, timeout_milliseconds);
             if (wait_result == ETIMEDOUT)
             {
                 // Codes_SRS_CONDITION_18_011: [ Condition_Wait shall return COND_TIMEOUT if the condition is NOT triggered and timeout_milliseconds is not 0 ]
@@ -110,7 +89,7 @@
         }
         else
         {
-            if (pthread_cond_wait((pthread_cond_t*)handle, (pthread_mutex_t *)lock) != 0)
+            if (condWait((handle_t)handle, (handle_t)lock, 0) != 0)
             {
                 LogError("Failed to pthread_cond_wait");
                 return COND_ERROR;
@@ -131,9 +110,8 @@
     if (handle != NULL)
     {
         // Codes_SRS_CONDITION_18_009: [ Condition_Deinit will deallocate handle if it is not NULL
-        pthread_cond_t* cond = (pthread_cond_t*)handle;
-        pthread_cond_destroy(cond);
-        free(cond);
+        resourceDestroy((handle_t)handle);
+        free(handle);
     }
 }

diff -ur '--exclude=*.git' azure-iot-sdk-c-lts_01_2022/c-utility/adapters/linux_time.c azure-iot-sdk-c-lts_01_2022-phoenix/c-utility/adapters/linux_time.c
--- azure-iot-sdk-c-lts_01_2022/c-utility/adapters/linux_time.c	2022-06-29 12:58:12.296841904 +0200
+++ azure-iot-sdk-c-lts_01_2022-phoenix/c-utility/adapters/linux_time.c	2022-06-29 13:01:48.483381036 +0200
@@ -23,15 +23,11 @@
 // minimum; querying pthread_condattr_t requires _POSIX_CLOCK_SELECTION [CS].
 // OSX has neither so we use a platform-specific clock.
 #ifndef __MACH__
+/* assuming that CLOCK_MONOTONIC or CLOCK_REALTIME is defined in Phoenix-RTOS */
 #if defined(CLOCK_MONOTONIC)
     time_basis = CLOCK_MONOTONIC;
 #elif defined(CLOCK_REALTIME)
     time_basis = CLOCK_REALTIME;
-#else
-    pthread_condattr_t cattr;
-    pthread_condattr_init(&cattr);
-    pthread_condattr_getclock(&cattr, &time_basis);
-    pthread_condattr_destroy(&cattr);
 #endif
 #endif
 }
